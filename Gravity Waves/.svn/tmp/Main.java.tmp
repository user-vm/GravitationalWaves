<<<<<<< .mine
// fuck it, I'm using this for shit

=======

>>>>>>> .r12
package com.GravityWaves.Main;

<<<<<<< .mine
import javafx.application.Application;
import javafx.scene.*;
import javafx.scene.image.*;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.transform.*;
import javafx.stage.Stage;
import javafx.animation.*;
import javafx.util.*;
import javafx.event.*;
import java.util.*;
=======
import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.scene.Group;
import javafx.scene.PerspectiveCamera;
import javafx.scene.PointLight;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.shape.Sphere;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;


public class Main extends Application {
	
//	private int WIDTH = 1080;
//	private int HEIGHT = WIDTH / 16 * 9;

	double anchorX, anchorY, anchorZ;

	private double anchorAngleX = 0;
	private double anchorAngleY = 0;
	private double anchorAngleZ = 0;

	private final DoubleProperty angleX = new SimpleDoubleProperty(0);
	private final DoubleProperty angleY = new SimpleDoubleProperty(0);
	private final DoubleProperty angleZ = new SimpleDoubleProperty(0);


	PerspectiveCamera scenePerspectiveCamera = new PerspectiveCamera(false);
>>>>>>> .r12

<<<<<<< .mine
public class Main extends Application {
	
	public Sphere testSphere;
	public double mass1 = 1;
	public Sphere testSphere2;
	public double mass2 = 10;
	public double distance=20;
	public int angle = 0;
	public int angle2 = 0;
	public MeshView orbitMesh=new MeshView(new OrbitMesh(distance*mass1/(mass1+mass2)));
	public MeshView orbitMesh2=new MeshView(new OrbitMesh(distance*mass2/(mass1+mass2)));
	PerspectiveCamera camera;
	final Xform cameraXform = new Xform();
    final Xform cameraXform2 = new Xform();
    final Xform cameraXform3 = new Xform();
    double mousePosX;
    double mousePosY;
    double mouseOldX;
    double mouseOldY;
    double mouseDeltaX;
    double mouseDeltaY;
    double ONE_FRAME = 1.0 / 24.0;
    double DELTA_MULTIPLIER = 200.0;
    double CONTROL_MULTIPLIER = 0.1;
    double SHIFT_MULTIPLIER = 0.1;
    double ALT_MULTIPLIER = 0.5;
    public Timeline timer = new Timeline();
    boolean timelinePlaying = true;
    Group root, stuffContainer;
    final Xform world = new Xform();
    ArrayList<ArrowBox> arrowBoxes = new ArrayList<ArrowBox>();
    PhongMaterial orbitMaterial;
	
	private void handleMouse(Scene scene, final Node root) {
        scene.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override public void handle(MouseEvent me) {
                mousePosX = me.getSceneX();
                mousePosY = me.getSceneY();
                mouseOldX = me.getSceneX();
                mouseOldY = me.getSceneY();
            }
        });
        scene.setOnMouseDragged(new EventHandler<MouseEvent>() {
        	
            @Override
            public void handle(MouseEvent me) {
            	//System.out.printf("ksgbjsbd");
                mouseOldX = mousePosX;
                mouseOldY = mousePosY;
                mousePosX = me.getSceneX();
                mousePosY = me.getSceneY();
                mouseDeltaX = (mousePosX - mouseOldX);
                mouseDeltaY = (mousePosY - mouseOldY);
=======
	@Override
	public void start(Stage stage) throws Exception {
>>>>>>> .r12

<<<<<<< .mine
                double modifier = 1.0;
                double modifierFactor = 0.1;
=======
		stage.setTitle("Space stuff...");
>>>>>>> .r12

<<<<<<< .mine
                if (me.isControlDown()) {
                    modifier = 0.1;
                }
                if (me.isShiftDown()) {
                    modifier = 10.0;
                }
                if (me.isPrimaryButtonDown()) {
                    cameraXform.ry.setAngle(cameraXform.ry.getAngle() - mouseDeltaX * modifierFactor * modifier * 2.0);  // +
                    cameraXform.rx.setAngle(cameraXform.rx.getAngle() + mouseDeltaY * modifierFactor * modifier * 2.0);  // -
                } else if (me.isSecondaryButtonDown()) {
                    double z = camera.getTranslateZ();
                    double newZ = z + mouseDeltaX * modifierFactor * modifier;
                    camera.setTranslateZ(newZ);
                } else if (me.isMiddleButtonDown()) {
                    cameraXform2.t.setX(cameraXform2.t.getX() + mouseDeltaX * modifierFactor * modifier * 0.3);  // -
                    cameraXform2.t.setY(cameraXform2.t.getY() + mouseDeltaY * modifierFactor * modifier * 0.3);  // -
                }
            }
        });
    }

    private void handleKeyboard(Scene scene, final Node root1) {
        final boolean moveCamera = true;
        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                Duration currentTime;
                switch (event.getCode()) {
                    case Z:
                        if (event.isShiftDown()) {
                            cameraXform.ry.setAngle(0.0);
                            cameraXform.rx.setAngle(0.0);
                            camera.setTranslateZ(-300.0);
                        }
                        cameraXform2.t.setX(0.0);
                        cameraXform2.t.setY(0.0);
                        break;
                    case SPACE:
                        if (timelinePlaying) {
                            timer.pause();
                            timelinePlaying = false;
                        } else {
                            timer.play();
                            timelinePlaying = true;
                        }
                        break;
                    case UP:
                        if (event.isControlDown() && event.isShiftDown()) {
                            cameraXform2.t.setY(cameraXform2.t.getY() - 10.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown() && event.isShiftDown()) {
                            cameraXform.rx.setAngle(cameraXform.rx.getAngle() - 10.0 * ALT_MULTIPLIER);
                        } else if (event.isControlDown()) {
                            cameraXform2.t.setY(cameraXform2.t.getY() - 1.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown()) {
                            cameraXform.rx.setAngle(cameraXform.rx.getAngle() - 2.0 * ALT_MULTIPLIER);
                        } else if (event.isShiftDown()) {
                            double z = camera.getTranslateZ();
                            double newZ = z + 5.0 * SHIFT_MULTIPLIER;
                            camera.setTranslateZ(newZ);
                        }
                        break;
                    case DOWN:
                        if (event.isControlDown() && event.isShiftDown()) {
                            cameraXform2.t.setY(cameraXform2.t.getY() + 10.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown() && event.isShiftDown()) {
                            cameraXform.rx.setAngle(cameraXform.rx.getAngle() + 10.0 * ALT_MULTIPLIER);
                        } else if (event.isControlDown()) {
                            cameraXform2.t.setY(cameraXform2.t.getY() + 1.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown()) {
                            cameraXform.rx.setAngle(cameraXform.rx.getAngle() + 2.0 * ALT_MULTIPLIER);
                        } else if (event.isShiftDown()) {
                            double z = camera.getTranslateZ();
                            double newZ = z - 5.0 * SHIFT_MULTIPLIER;
                            camera.setTranslateZ(newZ);
                        }
                        break;
                    case RIGHT:
                        if (event.isControlDown() && event.isShiftDown()) {
                            cameraXform2.t.setX(cameraXform2.t.getX() + 10.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown() && event.isShiftDown()) {
                            cameraXform.ry.setAngle(cameraXform.ry.getAngle() - 10.0 * ALT_MULTIPLIER);
                        } else if (event.isControlDown()) {
                            cameraXform2.t.setX(cameraXform2.t.getX() + 1.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown()) {
                            cameraXform.ry.setAngle(cameraXform.ry.getAngle() - 2.0 * ALT_MULTIPLIER);
                        }
                        break;
                    case LEFT:
                        if (event.isControlDown() && event.isShiftDown()) {
                            cameraXform2.t.setX(cameraXform2.t.getX() - 10.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown() && event.isShiftDown()) {
                            cameraXform.ry.setAngle(cameraXform.ry.getAngle() + 10.0 * ALT_MULTIPLIER);  // -
                        } else if (event.isControlDown()) {
                            cameraXform2.t.setX(cameraXform2.t.getX() - 1.0 * CONTROL_MULTIPLIER);
                        } else if (event.isAltDown()) {
                            cameraXform.ry.setAngle(cameraXform.ry.getAngle() + 2.0 * ALT_MULTIPLIER);  // -
                        }
                        break;
                }
            }
        });
    }
    
 
    public Parent createContent() throws Exception {
 
        // Create and position camera
        camera = new PerspectiveCamera(true);
 
        // Build the Scene Graph
        root = new Group();
        stuffContainer = new Group();
        buildCamera();
        root.getChildren().add(world);
        world.getChildren().add(stuffContainer);
        stuffContainer.getChildren().add(testSphere);
        stuffContainer.getChildren().add(testSphere2);
        stuffContainer.getChildren().add(orbitMesh);
        stuffContainer.getChildren().add(orbitMesh2);
        for (int i=0;i<9;i++)
        	for (int j=0;j<9;j++){
        		arrowBoxes.add(new ArrowBox(9*(i-4),9*(j-4),0));
        		arrowBoxes.get(i*9+j).boxXform.setRz(Math.toDegrees(Math.atan2(j-4,i-4)));
        		arrowBoxes.get(i*9+j).box.setMaterial(orbitMaterial);
        		stuffContainer.getChildren().add(arrowBoxes.get(i*9+j).boxXform);
        	}
        
        orbitMesh.setCullFace(CullFace.NONE);
        camera.setFarClip(500);
 
        return root;
        /*// Use a SubScene       
        SubScene subScene = new SubScene(root, 300,300,true,SceneAntialiasing.BALANCED);
        subScene.setFill(Color.ALICEBLUE);
        subScene.setCamera(camera);
        Group group = new Group();
        group.getChildren().add(subScene);
        return group;*/
    }
    
    public void updateSphere(double x,double y){
    	
    	testSphere.setTranslateX(x*(distance*mass2/(mass1+mass2)));
    	testSphere.setTranslateY(y*(distance*mass2/(mass1+mass2)));
    	testSphere2.setTranslateX(-x*(distance*mass1/(mass1+mass2)));
    	testSphere2.setTranslateY(-y*(distance*mass1/(mass1+mass2)));
    	//getTransforms().addAll(new Translate(x, y, 0));
    }
    
    public void updatePos(){
    	angle+=5;
    	angle%=360;
    	for (int i=0;i<81;i++){
    		arrowBoxes.get(i).scaleX(5*(1+Math.sin(Math.toRadians(angle))));
    	}
    	updateSphere((Math.cos(Math.toRadians(angle))),((Math.sin(Math.toRadians(angle)))));
    }
    
    private void buildCamera() {
        root.getChildren().add(cameraXform);
        cameraXform.getChildren().add(cameraXform2);
        cameraXform2.getChildren().add(cameraXform3);
        cameraXform3.getChildren().add(camera);
        cameraXform3.setRotateZ(180.0);

        camera.setNearClip(0.1);
        camera.setFarClip(10000.0);
        camera.setTranslateZ(-100);
        cameraXform.ry.setAngle(320.0);
        cameraXform.rx.setAngle(40);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setResizable(false);
        
        //sphere
        testSphere = new Sphere(2.5);
        testSphere.setMaterial(new PhongMaterial(Color.RED));
        testSphere.setDrawMode(DrawMode.FILL);
        
        testSphere2 = new Sphere(2.5*Math.pow(mass2/mass1,1.0/3));
        testSphere2.setMaterial(new PhongMaterial(Color.RED));
        testSphere2.setDrawMode(DrawMode.FILL);
        
        orbitMaterial = new PhongMaterial(Color.BLUE);
        orbitMaterial.setSelfIlluminationMap(new Image("green.png"));
        orbitMesh.setMaterial(orbitMaterial);
        orbitMesh.setDrawMode(DrawMode.LINE);
        
        orbitMesh2.setMaterial(orbitMaterial);
        orbitMesh2.setDrawMode(DrawMode.LINE);
        
        Scene scene = new Scene(createContent(),300,300,true,SceneAntialiasing.BALANCED);
        scene.setFill(Color.BLACK);
        primaryStage.setScene(scene);
        scene.setCamera(camera);
        primaryStage.show();

        final Duration oneFrameAmt = Duration.seconds(0.04);
        final KeyFrame oneFrame = new KeyFrame(oneFrameAmt,
        		new EventHandler<ActionEvent>() {
            		@Override
            		public void handle(ActionEvent evt) {
            			updatePos();
            		}
        	});

		timer = TimelineBuilder.create()
                                .cycleCount(-1)
                                .keyFrames(oneFrame)
                                .build();
        timer.playFromStart();
        System.out.printf("1");
        handleKeyboard(scene, world);
        handleMouse(scene, world);
        
    }

    /**
     * Java main for when running without JavaFX launcher
     */
    public static void main(String[] args) {
        launch(args);
    }
}=======
		Image diffuseMap = new Image(Main.class
				.getResource("/img/earth-mercator.jpg")
				.toExternalForm());
		
		PhongMaterial earthMaterial = new PhongMaterial();
		earthMaterial.setDiffuseMap(diffuseMap);
		
		final Sphere earth = new Sphere(100);
		earth.setMaterial(earthMaterial);
		
		final Group parent = new Group(earth);
		parent.setTranslateX(450);
		parent.setTranslateY(450);
		parent.setTranslateZ(100);
		
		Rotate xRotate;
		Rotate yRotate;
		Rotate zRotate;
		
		parent.getTransforms().setAll(
				xRotate = new Rotate(0, Rotate.X_AXIS),
				yRotate = new Rotate(0, Rotate.Y_AXIS),
				zRotate = new Rotate(0, Rotate.Z_AXIS)
				);
		
		xRotate.angleProperty().bind(angleX);
		yRotate.angleProperty().bind(angleY);
		zRotate.angleProperty().bind(angleZ);
		
		final Group root = new Group();
		root.getChildren().add(parent);
		
		final Scene scene = new Scene(root, 900, 900, true);
		scene.setFill(Color.BLACK);
		
//		scene.setOnMousePressed((MouseEvent event) -> {
//			anchorX = event.getSceneX();
//			anchorY = event.getSceneY();
//			anchorAngleX = angleX.get();
//			anchorAngleY = angleY.get();
//		});
//		
//		scene.setOnMouseDragged((MouseEvent event) -> {
//			angleX.set(anchorAngleX + anchorY + event.getSceneY());
//			angleY.set(anchorAngleY + anchorX - event.getSceneX());
//		});
		
		angleY.set(-45);
		angleZ.set(-15);
		
		
		
		PointLight pointLight = new PointLight(Color.WHITE);
		pointLight.setTranslateX(400);
		pointLight.setTranslateY(400);
		pointLight.setTranslateZ(-3000);
		
		scene.setCamera(scenePerspectiveCamera);		
		root.getChildren().addAll(pointLight, scenePerspectiveCamera);
		//stage.setResizable(false);
		stage.setScene(scene);
		
		stage.show();		

	}

	// Main method is ignored by JavaFx. Only here as a fallback.
	public static void main(String[] args) { launch(args); }

}
>>>>>>> .r12
